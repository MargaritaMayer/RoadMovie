//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.google.android.gms.maps.model;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import android.util.AttributeSet;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Reserved;
import com.google.android.gms.maps.GoogleMapOptions;

@Reserved({1})
@Class(
    creator = "LatLngBoundsCreator"
)
public final class LatLngBounds extends AbstractSafeParcelable implements ReflectedParcelable {
    @KeepForSdk
    public static final Creator<LatLngBounds> CREATOR = new zze();
    @Field(
        id = 2
    )
    public final LatLng southwest;
    @Field(
        id = 3
    )
    public final LatLng northeast;

    @Constructor
    public LatLngBounds(@Param(id = 2) LatLng var1, @Param(id = 3) LatLng var2) {
        Preconditions.checkNotNull(var1, "null southwest");
        Preconditions.checkNotNull(var2, "null northeast");
        Preconditions.checkArgument(var2.latitude >= var1.latitude, "southern latitude exceeds northern latitude (%s > %s)", new Object[]{var1.latitude, var2.latitude});
        this.southwest = var1;
        this.northeast = var2;
    }

    public final void writeToParcel(Parcel var1, int var2) {
        int var5 = SafeParcelWriter.beginObjectHeader(var1);
        SafeParcelWriter.writeParcelable(var1, 2, this.southwest, var2, false);
        SafeParcelWriter.writeParcelable(var1, 3, this.northeast, var2, false);
        SafeParcelWriter.finishObjectHeader(var1, var5);
    }

    public static LatLngBounds.Builder builder() {
        return new LatLngBounds.Builder();
    }

    public final boolean contains(LatLng var1) {
        double var4 = var1.latitude;
        return this.southwest.latitude <= var4 && var4 <= this.northeast.latitude && this.zza(var1.longitude);
    }

    public final LatLngBounds including(LatLng var1) {
        double var3 = Math.min(this.southwest.latitude, var1.latitude);
        double var5 = Math.max(this.northeast.latitude, var1.latitude);
        double var7 = this.northeast.longitude;
        double var9 = this.southwest.longitude;
        double var11 = var1.longitude;
        if (!this.zza(var11)) {
            if (zza(var9, var11) < zzb(var7, var11)) {
                var9 = var11;
            } else {
                var7 = var11;
            }
        }

        return new LatLngBounds(new LatLng(var3, var9), new LatLng(var5, var7));
    }

    public final LatLng getCenter() {
        double var1 = (this.southwest.latitude + this.northeast.latitude) / 2.0D;
        double var3 = this.northeast.longitude;
        double var5;
        double var7;
        if ((var5 = this.southwest.longitude) <= var3) {
            var7 = (var3 + var5) / 2.0D;
        } else {
            var7 = (var3 + 360.0D + var5) / 2.0D;
        }

        return new LatLng(var1, var7);
    }

    private static double zza(double var0, double var2) {
        return (var0 - var2 + 360.0D) % 360.0D;
    }

    private static double zzb(double var0, double var2) {
        return (var2 - var0 + 360.0D) % 360.0D;
    }

    private final boolean zza(double var1) {
        if (this.southwest.longitude <= this.northeast.longitude) {
            return this.southwest.longitude <= var1 && var1 <= this.northeast.longitude;
        } else {
            return this.southwest.longitude <= var1 || var1 <= this.northeast.longitude;
        }
    }

    public final int hashCode() {
        return Objects.hashCode(new Object[]{this.southwest, this.northeast});
    }

    public final boolean equals(Object var1) {
        if (this == var1) {
            return true;
        } else if (!(var1 instanceof LatLngBounds)) {
            return false;
        } else {
            LatLngBounds var2 = (LatLngBounds)var1;
            return this.southwest.equals(var2.southwest) && this.northeast.equals(var2.northeast);
        }
    }

    public final String toString() {
        return Objects.toStringHelper(this).add("southwest", this.southwest).add("northeast", this.northeast).toString();
    }

    public static LatLngBounds createFromAttributes(Context var0, AttributeSet var1) {
        return GoogleMapOptions.zza(var0, var1);
    }

    public static final class Builder {
        private double zzdh = 1.0D / 0.0;
        private double zzdi = -1.0D / 0.0;
        private double zzdj = 0.0D / 0.0;
        private double zzdk = 0.0D / 0.0;

        public Builder() {
        }

        public final LatLngBounds.Builder include(LatLng var1) {
            this.zzdh = Math.min(this.zzdh, var1.latitude);
            this.zzdi = Math.max(this.zzdi, var1.latitude);
            double var2 = var1.longitude;
            if (Double.isNaN(this.zzdj)) {
                this.zzdj = var2;
            } else {
                if (this.zzdj <= this.zzdk ? this.zzdj <= var2 && var2 <= this.zzdk : this.zzdj <= var2 || var2 <= this.zzdk) {
                    return this;
                }

                if (LatLngBounds.zza(this.zzdj, var2) < LatLngBounds.zzb(this.zzdk, var2)) {
                    this.zzdj = var2;
                    return this;
                }
            }

            this.zzdk = var2;
            return this;
        }

        public final LatLngBounds build() {
            Preconditions.checkState(!Double.isNaN(this.zzdj), "no included points");
            return new LatLngBounds(new LatLng(this.zzdh, this.zzdj), new LatLng(this.zzdi, this.zzdk));
        }
    }
}
